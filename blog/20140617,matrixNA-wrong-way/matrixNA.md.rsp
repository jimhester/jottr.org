<%@meta title="PITFALL: Did you really mean to use matrix(nrow, ncol)?"%>
<%@meta author="Henrik Bengtsson"%>
<%@meta keywords="R, performance, memory, speed"%>
<%@meta date="2014-06-17"%>

<%--
Photo source:
http://www.freefoto.com/preview/41-07-9/Wrong-Way-Road-Traffic-Sign
--%>
![Wrong Way!](images/wrong_way_035.jpg)

<%
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# RSP specific
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
R.utils::use("R.utils")

# Output
options("withCapture/newline"=FALSE)
options(deparse.cutoff=110)

# Links
%>
<% cran <- function(pkg) { %>[<%=pkg%>](http://cran.r-project.org/package=<%=pkg%>)<% } %>


# <%@meta name="title"%>
by <%@meta name="author"%> on <%@meta name="date"%>
(keywords: <%@meta name="keywords"%>)

Are you a good R citizen and preallocates your matrices?  **If you are allocating a numeric matrix in one of the following two ways, then you are doing it the wrong way!**
```r
x <- matrix(nrow=500, ncol=100)
```
or
```r
x <- matrix(NA, nrow=500, ncol=100)
```
Why?  Because it is counter productive.  And why is that?  In the above, 'x' becomes a **logical** matrix, and **not a numeric** matrix as intended.  This is because the default value of the 'data' argument of matrix() is `NA`, which is a **logical** value, i.e.
```r
<%=withCapture({
x <- matrix(nrow=500, ncol=100)
mode(x)
str(x)
})%>
```
Why is that bad?  Because, as soon as you assign a numeric value to any of the cells in 'x', the matrix will first have to be coerced to numeric when the new value is assigned.  **The originally allocated logical matrix was allocated in vain and just adds an unnecessary memory footprint and extra work for the garbage collector**.

Instead allocate it using `NA_real_` (or `NA_integer_` for integers):
```r
x <- matrix(NA_real_, nrow=500, ncol=100)
```
Of course, if you wish to allocate a matrix with all zeros, use `0` instead of `NA_real_` (or `0L` for integers).

The exact same thing happens with array(), which is also because the default value is `NA`, e.g.
```r
<%=withCapture({
x <- array(dim=c(500,100))
mode(x)
})%>
```

Similarly, be careful when you setup vectors using rep(), e.g. compare
```r
x <- rep(NA, times=500)
```
to
```r
x <- rep(NA_real_, times=500)
```
Note, if all you want is an empty vector with all zeros, you may as well use
```r
x <- double(500)
```
for doubles and
```r
x <- integer(500)
```
for integers.


## Details
In the 'base' package there is a neat little function called tracemem() that can be used to trace the internal copying of objects.  We can use it to show how the two cases differ. Lets start by doing it the wrong way:
```r
> x <- matrix(nrow=500, ncol=100)
> tracemem(x)
[1] "<0x00000000100a0040>"
> x[1,1] <- 3.14
tracemem[0x00000000100a0040 -> 0x000007ffffba0010]:
> x[1,2] <- 2.71
>
```
That 'tracemem' output message basically tells us that 'x' is copied, or more precisely that a new internal object (0x000007ffffba0010) is allocated and that 'x' now refers to that instead of the original one (0x00000000100a0040).  This happens because 'x' needs to be coerced from logical to numerical before assigning cell (1,1) the (numerical) value 3.14.  Note that there is no need for R to create a copy in the second assignment to 'x', because at this point it is already of a numeric type (and there are no other variables referring to it).

To avoid the extra copy, lets make sure to allocate a numeric matrix from the start and there will be no extra copies created:
```r
> x <- matrix(NA_real_, nrow=500, ncol=100)
> tracemem(x)
[1] "<0x000007ffffd70010>"
> x[1,1] <- 3.14
> x[1,2] <- 2.71
>
```


## Appendix

### Session information
```r
<% print(sessionInfo()) %>
```

### Reproducibility
<%@string gistuser="HenrikBengtsson"%>
<%@string gistid="4c1d81ef18129563c79b"%>
<%@string gistfile="matrixNA-wrong-way.md.rsp"%>
<%@meta source="https://gist.github.com/${gistuser}/${gistid}/raw/${gistfile}"%>

This report was generated from an RSP-embedded Markdown [document](<%@meta name="source"%>) using <%cran("R.rsp")%> v<%=packageVersion("R.rsp")%>.
<!--
It can be recompiled as `R.rsp::rfile("<%@meta name="source"%>")`.
-->
